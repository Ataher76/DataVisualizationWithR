theme_ipsum()
# Size
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, size=Species)) +
geom_point(size=6) +
theme_ipsum()
## Fill
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, fill=Species)) +
geom_point(size=6) +
theme_ipsum()
## Fill
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, fill = Species)) +
geom_point(size=6) +
theme_ipsum()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, fill = Species))+
geom_point()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, col = Species))+
geom_point()
## Col
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col = Species)) +
geom_point(size=6) +
theme_ipsum()
## Col
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col = Species)) +
geom_point(size=3) +
theme_ipsum()
#Mapping to several features
# load ggplot2
library(ggplot2)
library(hrbrthemes)
# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species, alpha=Species, size=Species, color=Species)) +
geom_point() +
theme_ipsum()
# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width,
shape=Species,
alpha=Species,
size=Species,
color=Species,
)) +
geom_point() +
theme_ipsum()
# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point(size=6) +
theme_ipsum()
#Works with any aesthetics
# load ggplot2
library(ggplot2)
library(hrbrthemes)
# Transparency
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) +
geom_point(size=6, color="#69b3a2") +
theme_ipsum()
# Shape
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) +
geom_point(size=6) +
theme_ipsum()
# Size
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) +
geom_point(size=6) +
theme_ipsum()
# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width,
shape=Species,
alpha=Species,
size=Species,
color=Species,
)) +
geom_point() +
theme_ipsum()
# library
library(ggplot2)
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_text(
label=rownames(data),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_text(
label=rownames(data),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F
)
T
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_text(
label=rownames(data),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
#Add labels with geom_label()
# library
library(ggplot2)
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_label(
label=rownames(data),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_label(
label=rownames(data),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)+
theme_bw()
#Add one text label only
# library
library(ggplot2)
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
# Add one annotation
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() + # Show dots
geom_label(
label="Look at this!",
x=4.1,
y=20,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2"
)
#Add labels for a selection of marker
# library
library(ggplot2)
library(dplyr)
library(tibble)
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
# Change data rownames as a real column called 'carName'
data <- data %>%
rownames_to_column(var="carName")
# Plot
ggplot(data, aes(x=wt, y=mpg)) +
geom_point() +
geom_label(
data=data %>% filter(mpg>20 & wt>3), # Filter data first
aes(label=carName)
)
# library
library(ggplot2)
# Iris dataset
head(iris)
# plot
ggplot(data=iris, aes(x=Sepal.Length, Petal.Length)) +
geom_point() +
geom_rug(col="steelblue",alpha=0.1, size=1.5)
#Marginal distribution with ggplot2 and ggExtra
# library
library(ggplot2)
library(ggExtra)
# The mtcars dataset is proposed in R
head(mtcars)
# classic plot :
p <- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) +
geom_point() +
theme(legend.position="none")
p
# with marginal histogram
p1 <- ggMarginal(p, type="histogram")
p1
# marginal density
p2 <- ggMarginal(p, type="density")
p2
# marginal boxplot
p3 <- ggMarginal(p, type="boxplot")
p3
# Create dummy data
data <- data.frame(
cond = rep(c("condition_1", "condition_2"), each=10),
my_x = 1:100 + rnorm(100,sd=9),
my_y = 1:100 + rnorm(100,sd=16)
)
# Basic scatter plot.
p1 <- ggplot(data, aes(x=my_x, y=my_y)) +
geom_point( color="#69b3a2") +
theme_ipsum()
p1
# with linear trend
p2 <- ggplot(data, aes(x=my_x, y=my_y)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
theme_ipsum()
p2
# linear trend + confidence interval
p3 <- ggplot(data, aes(x=my_x, y=my_y)) +
geom_point() +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_ipsum()
p3
p3
# with linear trend
p2 <- ggplot(data, aes(x=my_x, y=my_y)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
theme_ipsum()
p2
# linear trend + confidence interval
p3 <- ggplot(data, aes(x=my_x, y=my_y)) +
geom_point() +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_ipsum()
p3
library(geomtextpath)
library(hrbrthemes)
data(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_labelsmooth(aes(label = 'My Label'), fill = "white",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none') # remove legend
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_labelsmooth(aes(label = 'My Label'), fill = "white",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none') # remove legend
data(iris)
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_labelsmooth(aes(label = 'My Label'), fill = "white",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none') # remove legend
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_labelsmooth(aes(label = 'My Label'), fill = "white",
method = "lm", formula = y ~ x,
size = 3, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() +
guides(color = 'none') # remove legend
library(hrbrthemes)
dev.off()
rm()
data(iris)
View(LABELS)
library(hrbrthemes)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point() +
geom_labelsmooth(aes(label = Species), fill = "white",
method = "lm", formula = y ~ x,
size = 3, linewidth = 1, boxlinewidth = 0.4) +
theme_bw() + guides(color = 'none') # remove legend
survey <- c("Male","Female","Female","Male","Male","Male","Male","Male","Female","Female" )
factor <- factor(survey)
factor
summary(factor)
median(4:10)
mode(4:10)
mod(4:10)
mean(4:10)
median(4:11)
mean(4:11)
return(mode_value)
my_function <- function(x){
unique_values <- unique(x)
counts <- tabulate(match(x, unique_values))
mode_value <- unique_values[which.max(counts)]
return(mode_value)
}
x <- c(4:10, 4, 4)
my_function(x)
mode <- my_function(x)
mode
x <- c(4:10, 4, 5,5,)
mode <- my_function(x)
mode
x <- c(4:10, 4, 5,5,)
mode <- my_function(x)
mode
x <- c(4:10, 4, 5,5)
mode <- my_function(x)
mode
x <- c(4:10, 4,6,6,6, 5,5)
mode <- my_function(x)
mode
matrix(1:9, byrow = TRUE, nrow = 3)
matrix(1:9, byrow = F, nrow = 3)
library(vegan)
library(readxl)
data(phytoplankton)
library(vegan)
data(phytoplankton)
# Load the varespec dataset
data(varespec)
varespec
library(glimps)
# Munzer bhai---------------------------------------------------------
library(readxl)
library(writexl)
library(ggplot2)
library(openxlsx)
library(mvtnorm)
library(survival)
library(MASS)
library(TH.data)
library(tidyr)
library(tidyverse)
library(dplyr)
library(palmerpenguins)
library(emmeans)
library(multcomp)
library(ggsci)
library(tidytext)
library(ggpubr)
library(ggrepel)
library(GGally)
library(PerformanceAnalytics)
library(webr)
library(plotly)
library(stats)
library(plotly)
library(plot3D)
library(plotrix)
library(vegan)
library(palmerpenguins)
library(tidyverse)
library(ggstatsplot)
library(rstantools)
glimpse(varespec)
head(varespec)
# Perform square root transformation
varespec_sqrt <- sqrt(varespec)
varespec_sqrt
# Calculate Bray-Curtis similarities
varespec_bc <- vegdist(varespec_sqrt, method = "bray")
varespec_bc
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ 1, data = varespec_sqrt)
varespec_bc
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ 1, data = varespec_sqrt)
cap_result
# Plot biplot
plot(cap_result, display = "sites", type = "text")
# Add species labels to the biplot
text(cap_result, display = "species", col = "red")
# Add title and axis labels
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
# Add title and axis labels
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
ylabel <- paste("CAP Axis 2 (", round(summary(cap_result)$cont$CA2, 2), "%)", sep = "")
xlabel(xlabel)
ylabel(ylabel)
# Add title and axis labels
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
# Plot biplot
plot(cap_result, display = "sites", type = "text")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
# Add title and axis labels
str(summary(cap_result)$cont$CA1)
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
ylabel <- paste("CAP Axis 2 (", round(summary(cap_result)$cont$CA2, 2), "%)", sep = "")
str(summary(cap_result)$cont$CA2)
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
ylabel <- paste("CAP Axis 2 (", round(summary(cap_result)$cont$CA2, 2), "%)", sep = "")
xlabel(xlabel)
ylabel(ylabel)
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1), "%)", sep = "")
# Example temporal grouping (you should replace this with your own)
temporal_group <- factor(rep(c("Spring", "Summer", "Autumn", "Winter"), each = 10))
# Calculate Bray-Curtis dissimilarities
phyto_bc <- vegdist(phyto_data, method = "bray")
# Example temporal grouping (you should replace this with your own)
temporal_group <- factor(rep(c("Spring", "Summer", "Autumn", "Winter"), each = 10))
# Calculate Bray-Curtis dissimilarities
phyto_bc <- vegdist(phyto_data, method = "bray")
# Example temporal grouping (you should replace this with your own)
temporal_group <- factor(rep(c("Spring", "Summer", "Autumn", "Winter"), each = 10))
# Calculate Bray-Curtis dissimilarities
phyto_bc <- vegdist(phyto_data, method = "bray")
varespec_bc <- vegdist(varespec_sqrt, method = "bray")
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ temporal_group)
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ 1)
cap_result
# Assess significance (permutation test)
permutest(cap_result)
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ 1)
# Assess significance (permutation test)
permutest(cap_result)
data(varespec)
data
data(varespec)
# Check the structure of the varespec dataset
str(varespec)
# Assuming 'temporal_group' is your temporal grouping variable (replace it with your own)
temporal_group <- factor(rep(c("Spring", "Summer", "Autumn", "Winter"), each = 20))
# Calculate Bray-Curtis dissimilarities
varespec_bc <- vegdist(varespec, method = "bray")
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ temporal_group)
data(varespec)
# Check the structure of the varespec dataset
str(varespec)
# Assuming 'temporal_group' is your temporal grouping variable (replace it with your own)
temporal_group <- factor(rep(c("Spring", "Summer", "Autumn", "Winter"), each = nrow(varespec)/4))
# Calculate Bray-Curtis dissimilarities
varespec_bc <- vegdist(varespec, method = "bray")
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ temporal_group)
# Assess significance (permutation test)
permutest(cap_result)
# Plot biplot
plot(cap_result, display = "sites", type = "text", col = temporal_group)
text(cap_result, display = "species", col = "red")
library(cluster)
setwd("D:/Project Work/Others/Munzer bhai/Thesis")
abundance_data <- read_excel("Index.xlsx", sheet = "Index", )
abundance_data
abundance_data <- read_excel("Index.xlsx", sheet = "Index")
abundance_data
abundance_data %>%
select(10,11)
abundance_data %>%
select(9,11)
abundance_data %>%
select(9,10)
abundance_data
mdata <- read_excel("Index.xlsx", sheet = "Index")
abundance_data <- mdata %>%
select(9,10)
abundance_data
# Step 2: Square root transformation
abundance_sqrt <- sqrt(abundance_data)
abundance_data <- mdata %>%
select(10)
# Step 2: Square root transformation
abundance_sqrt <- sqrt(abundance_data)
abundance_sqrt
abundance_data
# Step 2: Square root transformation
abundance_sqrt <- sqrt(abundance_data)
# Step 3: Calculate Bray-Curtis dissimilarities
bc_dissim <- vegdist(abundance_sqrt, method = "bray")
abundance_data <- mdata %>%
select(10) %>%
drop_na()
abundance_data
abundance_data <- mdata %>%
select(10)
abundance_data <- mdata %>%
select(10) %>%
filter(AVGW == 0)
abundance_data
abundance_data <- mdata %>%
select(10) %>%
filter(!AVGW == 0)
abundance_data
# Step 2: Square root transformation
abundance_sqrt <- sqrt(abundance_data)
# Step 3: Calculate Bray-Curtis dissimilarities
bc_dissim <- vegdist(abundance_sqrt, method = "bray")
bc_dissim
# Step 4: Perform nMDS
nmds_result <- metaMDS(bc_dissim)
# Step 5: Perform Group Average Clustering (UPGMA)
cluster_result <- hclust(bc_dissim, method = "average")
# Step 6: Plot the nMDS ordination with cluster membership
plot(nmds_result$points, type = "n", main = "nMDS Ordination")
text(nmds_result$points, labels = rownames(abundance_data), col = as.numeric(cutree(cluster_result, k = <number_of_clusters>)))
# Add legend for cluster membership
legend("topright", legend = unique(cutree(cluster_result, k = <number_of_clusters>)), col = 1:max(cutree(cluster_result, k = <number_of_clusters>)), pch = 1)
varespec <- abundance_data
varespec
# Perform square root transformation
varespec_sqrt <- sqrt(varespec)
# Calculate Bray-Curtis similarities
varespec_bc <- vegdist(varespec_sqrt, method = "bray")
# Perform CAP analysis
cap_result <- capscale(varespec_bc ~ 1, data = varespec_sqrt)
# Plot biplot
plot(cap_result, display = "sites", type = "text")
# Add species labels to the biplot
text(cap_result, display = "species", col = "red")
# Add title and axis labels
str(summary(cap_result)$cont$CA1)
str(summary(cap_result)$cont$CA2)
title("CAP Biplot")
xlabel <- paste("CAP Axis 1 (", round(summary(cap_result)$cont$CA1, 2), "%)", sep = "")
ylabel <- paste("CAP Axis 2 (", round(summary(cap_result)$cont$CA2, 2), "%)", sep = "")
xlabel(xlabel)
ylabel(ylabel)
